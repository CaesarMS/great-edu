{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Contract3October/Coba.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nlibrary Calculator {\n    function calcPercentage(\n        uint256 numerator,\n        uint256 denumerator\n    ) public pure returns(uint256){\n        return numerator * 100 / denumerator;\n    }\n}\n\ncontract Coba {\n    using Calculator for uint256;\n\n    // state variable atau storage variable\n    enum Gender { Male, Female } // 0, 1 => index\n\n    struct UserDetail {\n        Gender userGender;\n        uint256 score;\n        address user;\n        bool isPassed;\n        string userName;\n    }\n    UserDetail public userDetail;\n    // uint256 public balance;\n\n    mapping(address => uint256) public balance;\n\n    event UserAdded(address user);\n\n    address public owner = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n    modifier onlyOwner {\n        require(msg.sender == owner); // if passed, then continue\n        // pake: 20 gas used\n        _;\n    }\n\n    function calcPercentage(\n        uint256 numerator,\n        uint256 denumerator\n    ) public pure returns(uint256){\n        // return Calculator.calcPercentage(numerator, denumerator);\n        return numerator.calcPercentage(denumerator);\n    }\n\n    // 100 gas => 79 gas\n    function setUser(\n        uint256 _score,\n        address _user,\n        string calldata _userName,\n        Gender _gender\n    ) public onlyOwner {\n        require(_score < 100, \"more than 100\"); // pake: 1 gas\n        // sisa gas = 79 gas => kembali ke user\n\n        _setUser(_score, _user, _userName, _gender);\n\n        emit UserAdded(_user);\n    }\n\n    function addBalance(uint256 _balance) public {\n        balance[msg.sender] += _balance;\n    }\n\n    function getBlockNumber() public view returns(uint256){\n        return block.number;\n    }\n\n    // function setScore()....\n    // fallback() external {\n\n    // }\n\n    // receive() external payable {\n    //     // function untuk menerima ether\n    // }\n\n    function _setUser(\n        uint256 _score,\n        address _user,\n        string calldata _userName,\n        Gender _userGender\n    ) internal {\n        // internal code\n        // 100 gas\n        assert(userDetail.isPassed == false);\n\n        userDetail = UserDetail({\n            userGender: _userGender,\n            score: _score,\n            user: _user,\n            isPassed: false,\n            userName: _userName\n        });\n\n\n        uint256 minScore = 75;\n        if(_score >= minScore) {\n            userDetail.isPassed = true;\n        } else if (_score == 0){\n            revert(\"no score\");\n        }\n    }\n\n}\n\ncontract Coba2 is Coba {\n    function callSetUser(\n        uint256 _score,\n        address _user,\n        string calldata _userName,\n        Gender _userGender\n    ) public {\n        _setUser(_score, _user, _userName, _userGender);\n    }\n}"
    },
    "contracts/Contract3October/Coba2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\ncontract Coba2 {\n    address public owner = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\n\n    string[] public name;\n    mapping(string => uint256) public nameIndex;\n\n    function addName(string calldata _name) external {\n        nameIndex[_name] = nameLength();\n        name.push(_name);\n    }\n\n    function nameLength() public view returns(uint256) {\n        return name.length;\n    }\n\n    function isOwner() internal view {\n        require(msg.sender == owner, \"unauthorized\");\n    }\n\n    function isNameExist(string calldata _name) public view returns(bool){\n        if (name.length == 0) {\n            return false;\n        }\n        \n        uint256 _nameIndex = nameIndex[_name]; // dapat index\n        string memory _fetchName = name[_nameIndex];\n\n        return keccak256(bytes(_fetchName)) == keccak256(bytes(_name));\n    }\n\n    function removeName(string calldata _name) external {\n        isOwner();\n        \n        require(name.length > 0, \"no list\");\n        require(isNameExist(_name), \"not found\");\n\n        uint256 indexToRemove = nameIndex[_name];\n        string memory nameToMove = name[nameLength() - 1];\n\n        name[indexToRemove] = nameToMove;\n        nameIndex[nameToMove] = indexToRemove;\n\n        delete nameIndex[_name];\n        name.pop();\n    }\n}"
    },
    "contracts/Contract3October/Profile.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./ScoreCalc.sol\";\n\ncontract Profile {\n    using ScoreCalc for uint256;\n    uint256 public constant minScore = 75;\n\n    struct Score {\n        uint128 subjectIndex;\n        uint128 score;\n        string subjectName;\n    }\n    mapping(address => Score[]) public userScore;\n    mapping(address => mapping(string => uint256)) public userSubjectIndex;\n\n    address[] public owner;\n    mapping(address => uint256) public ownerIndex;\n\n    modifier onlyOwner {\n        uint256 _ownerIndex = ownerIndex[msg.sender];\n\n        require(owner[_ownerIndex] == msg.sender, \"unauthorized\");\n        _;\n    }\n\n    constructor(address _owner){\n        owner.push(_owner);\n    }\n\n    function addUser(\n        address _user,\n        string calldata _subjectName,\n        uint256 _score\n    ) public onlyOwner {\n        uint256 index = getUserScoreLength(_user);\n        userSubjectIndex[_user][_subjectName] = index;\n\n        userScore[_user].push(Score({\n            subjectIndex: uint128(index),\n            subjectName: _subjectName,\n            score: uint128(_score)\n        }));\n    }\n\n    function isUserExist(address _user) public view returns(bool){\n        return userScore[_user].length > 0;\n    }\n\n    function isUserSubjectExist(\n        address _user,\n        string calldata _subjectName\n    ) public view returns(bool){\n        if(getUserScoreLength(_user) == 0) return false;\n\n        uint256 subjectIndex = userSubjectIndex[_user][_subjectName];\n\n        return keccak256(bytes(userScore[_user][subjectIndex].subjectName)) == keccak256(bytes(_subjectName));\n    }\n\n    function removeSubject(\n        address _user,\n        string calldata _subjectName\n    ) public onlyOwner {\n        require(isUserSubjectExist(_user, _subjectName), \"not found\");\n\n        uint256 subjectIndexToRemove = userSubjectIndex[_user][_subjectName];\n        Score memory userSubjectDataToMove = userScore[_user][getUserScoreLength(_user) - 1];\n\n        userScore[_user][subjectIndexToRemove] = userSubjectDataToMove;\n        userScore[_user][subjectIndexToRemove].subjectIndex = uint128(subjectIndexToRemove);\n\n        delete userSubjectIndex[_user][_subjectName];\n        userScore[_user].pop();\n    }\n\n    function getUserScoreLength(address _user) public view returns(uint256){\n        return userScore[_user].length;\n    }\n\n    function isUserPassed(\n        address _user,\n        uint256 _index\n    ) external view returns(bool){\n        require(getUserScoreLength(_user) > 0, \"no record\");\n\n        // Score memory scoreDetail = userScore[_user][_index];\n        uint256 _userScore = userScore[_user][_index].score;\n\n        return _userScore.isPassed(minScore);\n    }\n}"
    },
    "contracts/Contract3October/ScoreCalc.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary ScoreCalc {\n    function isPassed(\n        uint256 _score,\n        uint256 _minScore\n    ) external pure returns(bool) {\n        return _score > _minScore;\n    }\n}\n"
    },
    "contracts/Contract4October/AttendanceBook.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport './interface/IEmployee.sol';\n\ncontract AttendanceBook {\n    uint256 public start;\n    uint256 public end;\n    uint256 public attendanceLength;\n    address public employee;\n\n    mapping(address => bool) public isAttend;\n\n    modifier onlyEmployee() {\n        require(\n            IEmployee(employee).isEmployeeExist(msg.sender),\n            'not an employee'\n        );\n        _;\n    }\n\n    constructor(address _employee) {\n        employee = _employee;\n    }\n\n    function attend() external onlyEmployee {\n        isAttend[msg.sender] = true;\n        attendanceLength += 1;\n    }\n\n    function attendancePercentage() external view returns (uint256) {\n        uint256 totalEmployee = IEmployee(employee).employeeLength();\n\n        return (attendanceLength * 100) / totalEmployee;\n    }\n}\n"
    },
    "contracts/Contract4October/Employee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interface/IEmployee.sol';\n\ncontract Employee is Ownable, IEmployee {\n    struct Detail {\n        uint256 employeeIndex;\n        string name;\n        string position;\n    }\n    mapping(address => Detail) public employeeDetail;\n    address[] public employees;\n\n    function employeeLength() public view override returns (uint256) {\n        return employees.length;\n    }\n\n    function addEmployee(\n        address _employee,\n        string calldata _name,\n        string calldata _position\n    ) external override onlyOwner {\n        employeeDetail[_employee] = Detail({\n            employeeIndex: employeeLength(),\n            name: _name,\n            position: _position\n        });\n        employees.push(_employee);\n    }\n\n    function isEmployeeExist(\n        address _employee\n    ) public view override returns (bool) {\n        if (employeeLength() == 0) return false;\n\n        uint256 index = employeeDetail[_employee].employeeIndex;\n\n        return employees[index] == _employee;\n    }\n\n    function removeEmployee(address _employee) external onlyOwner {\n        require(isEmployeeExist(_employee), 'not found');\n\n        uint256 indexToRemove = employeeDetail[_employee].employeeIndex;\n        address employeeToMove = employees[employeeLength() - 1];\n\n        employees[indexToRemove] = employeeToMove;\n        employeeDetail[employeeToMove].employeeIndex = indexToRemove;\n\n        delete employeeDetail[_employee];\n        employees.pop();\n    }\n}\n"
    },
    "contracts/Contract4October/interface/IEmployee.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface IEmployee {\n    function employeeLength() external view returns (uint256);\n\n    function isEmployeeExist(address _employee) external view returns (bool);\n\n    function addEmployee(\n        address _employee,\n        string calldata _name,\n        string calldata _position\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}